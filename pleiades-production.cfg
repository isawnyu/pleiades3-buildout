# Pleiades test-production buildout. Should be further customized for actual production.
[home]
eggcarton = /home/zope/pleiades/eggcarton

[buildout]
extends =
    buildout.cfg
parts =
    pil-src
    pil-install
    cython-src
    cython-install
    ctypes-src
    ctypes-install
    libxml2
    libxslt
    lxml-download
    lxml-install
    pyproj
    libgeos
    shapely
    PleiadesEntity
    zope2
    productdistros
    instance
    zopepy
    setenv
    kss-patch
    atvm-patch
    pai-patch
    zeoserver
    instance1
    instance2
    debug-instance
    nginx-build
    varnish-build
    cache
    balancer
    logrotate.conf
    supervisor

[downloads]
nginx = http://nginx.org/download/nginx-1.0.15.tar.gz
varnish = http://repo.varnish-cache.org/source/varnish-2.1.5.tar.gz

[instance-settings]
environment-vars =
    LD_LIBRARY_PATH ${libgeos:location}/lib:${libxml2:location}/lib:${libxslt:location}/lib
    GMAPS_KEY ABQIAAAAtVyXL2o7HAFbw73xSniLfhSojaX1t1STtZgEm2XSl65R-0GV_BR2MZGMSbQ8gGXzadmo6Ge8Uqf5vw
    VAYTROU_URI http://localhost:8887
eggs =
    ${buildout:eggs}
    ${pyproj:eggs}
    ${shapely:eggs}
    plone.app.ldap
    Products.PloneLDAP
    Products.CacheSetup
    plonetheme.notredame
    pleiades.notredame
    httplib2
    pleiades.vaytrouindex
    pleiades.neighbors
    pleiades.reconciliation
    ZPublisherEventsBackport
    plone.app.blob
    Products.PloneHotfix20121106
zcml =
    pleiades.policy
    plone.app.ldap
    pleiades.notredame
    pleiades.sitemap
    pleiades.placematch
    pleiades.vaytrouindex
    pleiades.neighbors
    archetypes.referencebrowserwidget
    pleiades.reconciliation
    pleiades.iterate
    pleiades.portlet.flickr
    pleiades.portlet.pelagios
products =
    ${buildout:directory}/products
    ${productdistros:location}
user = admin:xxxxx
zodb-cache-size = 5000
zeo-client-cache-size = 300MB
debug-mode = off
zope2-location = ${zope2:location}
zeo-client = true
zeo-address = ${zeoserver:zeo-address}
effective-user = ${users:zope}
http-address = $${:http-address}
blob-storage = ${zeoserver:zeo-var}/blobstorage
shared-blob-dir = on

[supervisor-settings]
user = admin
password = xxxx

[plone-sites]
main = plone

[hosts]
main = pleiades.stoa.org
cache = atlantides.org
supervisor = atlantides.org
balancer = atlantides.org
instance1 = atlantides.org
instance2 = 127.0.0.1
debug-instance = 127.0.0.1

[ports]
main = 80
cache = 8101
balancer = 8201
zeo-server = 8301
instance1 = 8080
instance2 = 8402
debug-instance = 8403
supervisor = 9901

[users]
cache = zope
balancer = zope
zope = zope
supervisor = zope

[zeoserver]
recipe = plone.recipe.zope2zeoserver
zope2-location = ${zope2:location}
zeo-address = ${ports:zeo-server}
effective-user = ${users:zope}
zeo-var = ${buildout:directory}/var
blob-storage = ${zeoserver:zeo-var}/blobstorage
eggs = plone.app.blob
pack-days = 7

[instance1]
recipe = collective.recipe.zope2cluster
instance-clone = instance-settings
http-address = ${hosts:instance1}:${ports:instance1}

[instance2]
recipe = collective.recipe.zope2cluster
instance-clone = instance-settings
http-address = ${hosts:instance2}:${ports:instance2}
zope-conf-additional +=
    enable-product-installation false

[debug-instance]
recipe = collective.recipe.zope2cluster
instance-clone = instance-settings
http-address = ${hosts:debug-instance}:${ports:debug-instance}
zope-conf-additional +=
    enable-product-installation false

[nginx-build]
recipe = zc.recipe.cmmi
url = ${downloads:nginx}

[varnish-build]
recipe = zc.recipe.cmmi
url = ${downloads:varnish}

[cache]
recipe = plone.recipe.varnish
daemon = ${buildout:directory}/parts/varnish-build/sbin/varnishd
bind = ${hosts:cache}:${ports:cache}
backends = ${hosts:balancer}:${ports:balancer}
cache-size = 1G
user = ${users:cache}
mode = foreground

[balancer]
recipe = gocept.nginx
nginx = nginx-build
configuration = 
    user ${users:balancer};
    error_log ${buildout:directory}/var/log/balancer-error.log warn;
    worker_processes 1;
    daemon off; 
    events {
        worker_connections 1024;
    }
    http {
        upstream zope {
            server ${hosts:instance1}:${ports:instance1} max_fails=3 fail_timeout=30s;
            server ${hosts:instance2}:${ports:instance2} max_fails=3 fail_timeout=30s;
        }
        server {
            listen ${hosts:balancer}:${ports:balancer};
            server_name ${hosts:balancer};
            access_log off;
            rewrite ^/(.*)  /VirtualHostBase/http/${hosts:main}:${ports:main}/${plone-sites:main}/VirtualHostRoot/$1 last;
            location / {
                proxy_pass http://zope;
            }
        }
    }
    
[supervisor]
recipe = collective.recipe.supervisor
port = ${ports:supervisor}
user = ${supervisor-settings:user}
password = ${supervisor-settings:password}
serverurl = http://${hosts:supervisor}:${ports:supervisor}
programs =
    10 zeo       ${zeoserver:location}/bin/runzeo                  true ${users:zope}
    20 instance1 ${buildout:directory}/parts/instance1/bin/runzope true ${users:zope}
    20 instance2 ${buildout:directory}/parts/instance2/bin/runzope true ${users:zope}
    30 cache     ${buildout:directory}/bin/cache                   true ${users:cache}
    40 balancer  ${nginx-build:location}/sbin/nginx [-c ${balancer:run-directory}/balancer.conf] true ${users:balancer}

[logrotate.conf]
recipe = zc.recipe.deployment:configuration
text = 
    rotate 4
    weekly
    create
    compress
    delaycompress

    ${buildout:directory}/var/log/instance1*.log {
        sharedscripts
        postrotate
            /bin/kill -USR2 $(cat ${buildout:directory}/var/instance1.pid)
        endscript
    }
    
    ${buildout:directory}/var/log/instance2*.log {
        sharedscripts
        postrotate
            /bin/kill -USR2 $(cat ${buildout:directory}/var/instance2.pid)
        endscript
    }
    
    ${buildout:directory}/var/log/zeoserver.log {
        postrotate
            /bin/kill -USR2 $(cat ${buildout:directory}/var/zeoserver.pid)
        endscript
    }
    
    ${buildout:directory}/var/log/balancer*.log {
        sharedscripts
        postrotate
            /bin/kill -USR1 $(cat ${balancer:run-directory}/balancer.pid)
        endscript
    }
